@using ShoppingHub.BLL.ModelVm
@{
    Layout = "~/Views/Shared/_NewLayout.cshtml";
}
@inject IStringLocalizer<sharedResources> SharedLocalizer
@model CreateOrderVM
 
<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script>
        <style>
    .form-container {
        background-color: #ffffff;
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 650px;
        margin: 20px auto;
    }

    .input-group {
        margin-bottom: 20px;
    }

    .input-group label {
        font-weight: 600;
        color: #343a40;
        margin-bottom: 8px;
        font-size: 16px;
        display: block;
    }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 12px;
        font-size: 16px;
        width: 100%;
        box-sizing: border-box;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
    }

    .form-control:invalid:focus {
        border-color: #dc3545;
        box-shadow: 0 0 8px rgba(220, 53, 69, 0.3);
    }

    .form-control:disabled {
        background-color: #e9ecef;
        cursor: not-allowed;
    }

    .mb-3 {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: 600;
        color: #343a40;
        margin-bottom: 8px;
        font-size: 16px;
        display: block;
    }

    .form-select {
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 12px;
        font-size: 16px;
        background-color: #fff;
        width: 100%;
        box-sizing: border-box;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

    .form-select:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        padding: 14px 24px;
        font-size: 18px;
        font-weight: 600;
        border-radius: 8px;
        width: 100%;
        color: #ffffff;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
    }

    .btn-primary:active {
        transform: translateY(0);
    }

    .payment-option {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .fa-cc-visa { color: #1a1f71; }
    .fa-cc-mastercard { color: #eb001b; }
    .fa-money-bill { color: #15803d; }

    .date-group {
        position: relative;
        margin-bottom: 20px;
    }

    .date-group .form-control {
        padding-left: 40px;
        height: 44px;
    }

    .date-group .fa-calendar {
        position: absolute;
        top: 38px;
        left: 12px;
        color: #007bff;
        font-size: 16px;
    }

    .day-display {
        font-size: 14px;
        color: #6c757d;
        margin-top: 5px;
    }

    @@media (max-width: 576px) {
        .form-container {
            padding: 25px;
            max-width: 100%;
        }

        .form-control,
        .form-select,
        .form-label {
            font-size: 14px;
            padding: 10px;
        }

        .btn-primary {
            font-size: 16px;
            padding: 12px;
        }

        .date-group .fa-calendar {
            top: 36px;
            font-size: 14px;
        }

        .date-group .form-control {
            height: 40px;
        }
    }
</style>

<div class="form-container">
    <form asp-action="confirmOrder"  asp-controller="order">
        <div class="input-group">
            @* <input type="hidden" asp-for="Address" id="addressOutput"> *@
            <div>
                <label for="city">@SharedLocalizer["City"]</label>
                <input type="text" asp-for="Address.City" class="form-control" id="city" placeholder="Enter city" required aria-label="City input">
            </div>
            <div>
                <label for="street">@SharedLocalizer["Street"]</label>
                <input type="text" asp-for="Address.Street" class="form-control" id="street" placeholder="Enter street" required aria-label="Street input">
            </div>
            <div>
                <label for="building">@SharedLocalizer["Building"]</label>
                <input type="text" asp-for="Address.Building" class="form-control" id="building" placeholder="Enter building number" required aria-label="Building number input">
            </div>
        </div>
        <div class="date-group">
            <label for="arrivalDate" class="form-label">@SharedLocalizer["ArrivalDate"]</label>
            <i class="fa-solid fa-calendar"></i>
            <input type="date" class="form-control"  id="arrivalDate" value="@DateTime.Today.AddDays(2).ToString("yyyy-MM-dd")" disabled aria-label="Arrival date input">
            <div class="day-display">@DateTime.Today.AddDays(2).ToString("dddd")</div>
        </div>
        <div class="mb-3">
            <label for="paymentMethod" class="form-label">@SharedLocalizer["PaymentMethod"]</label>
            <select class="form-select" asp-for="PaymentMethod" id="paymentMethod" aria-label="Payment method selection">
                <option value="visa" class="payment-option"><i class="fa-brands fa-cc-visa"></i> @SharedLocalizer["visa"]</option>
                <option value="mastercard" class="payment-option"><i class="fa-brands fa-cc-mastercard"></i> @SharedLocalizer["mastercard"]</option>
                <option value="cash" class="payment-option"><i class="fa-solid fa-money-bill"></i> @SharedLocalizer["cash"]</option>
            </select>
        </div>
        <button type="submit" class="btn btn-outline-primary">@SharedLocalizer["order"]</button>
    </form>
</div>

<script>
    // Combine address fields into a single string for backend
    document.querySelector('form').addEventListener('submit', (e) => {
        const city = document.getElementById('city').value.trim();
        const street = document.getElementById('street').value.trim();
        const building = document.getElementById('building').value.trim();

        // Combine non-empty fields into a single string
        const addressParts = [city, street, building];
        const addressString = addressParts.filter(part => part).join(', ');

        // Set the combined address to the hidden input
        document.getElementById('addressOutput').value = addressString;
    });
</script>