<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script>@using ShoppingHub.BLL.ModelVm
@using ShoppingHub.BLL.ModelVm.order
@{
    Layout = "~/Views/Shared/_NewLayout.cshtml";
}
@model List<getAllOrdersVM>

<div class="container mt-4">
    <h2>Orders Management</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>Order Date</th>
                <th>Delivery Date</th>
                <th>Shipping Address</th>
                <th>Payment Method</th>
                <th>Total Price</th>
                <th>Total Items</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.OrderId</td>
                    <td>@item.OrderDate</td>
                    <td>@item.DeliveryDate</td>
                    <td>@item.ShippingAddress</td>
                    <td>@item.PaymentMethod</td>
                    <td>@item.TotalPrice</td>
                    <td>@item.TotalItems</td>
                    <td>@item.Status</td>

                    <td>
                          <form asp-action="UpdateStatus" method="post" class="d-flex gap-2">
                            <input type="hidden" name="orderId" value="@item.OrderId" />
                            <select name="status" class="form-select form-select-sm">
                                <option value="Pending" selected="@(item.Status == " Pending")">Pending</option>
                                <option value="Processing" selected="@(item.Status == " Shipping")">Shipping</option>
                                <option value="Completed" selected="@(item.Status == " Completed")">Completed</option>
                                <option value="Cancelled" selected="@(item.Status == " Cancelled")">Cancelled</option>
                            </select>
                            <button type="submit" class="btn btn-primary btn-sm">Update</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>