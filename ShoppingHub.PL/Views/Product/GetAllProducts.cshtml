@model ShoppingHub.BLL.ModelVm.GetAllProductsVM

@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_NewLayout.cshtml"; 
    var isRtl = System.Threading.Thread.CurrentThread.CurrentUICulture.TwoLetterISOLanguageName == "ar";
}

<style>
    /* Global Product Colors & Variables */
    :root {
        --primary-color: #667eea;
        --secondary-color: #764ba2;
        --accent-red: #ff6b6b; /* For price */
        --text-dark: #333;
        --text-muted: #6c757d;
        --white: #ffffff;
        --light-gray: #f8f9fa;
        --medium-gray: #e9ecef;

        --card-bg: var(--white);
        --card-border: var(--medium-gray);
        --card-shadow-light: 0 4px 12px rgba(0, 0, 0, 0.05);
        --card-shadow-hover: 0 8px 20px rgba(0, 0, 0, 0.1);
    }

    body {
        background-color: var(--light-gray);
    }

    /* Page Header */
    .page-title {
        font-size: 2.8rem; /* Slightly larger */
        color: var(--primary-color);
        font-weight: 800; /* Bolder */
        letter-spacing: 1px;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.08);
        margin-bottom: 3rem; /* More space */
    }

    /* Products Container */
    .products-container {
        padding: 30px 20px;
        background-color: var(--white); /* Lighter background for content area */
        border-radius: 12px;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.07); /* A subtle lift */
    }
    
    /* ---------------------- Filter Section ---------------------- */
    .filter-section {
        background-color: var(--light-gray);
        border-radius: 10px;
        padding: 1.5rem;
        margin-bottom: 2.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .filter-section .form-control,
    .filter-section .form-select {
        border-radius: 8px;
        border: 1px solid #ced4da;
        transition: border-color 0.2s, box-shadow 0.2s;
    }
    .filter-section .form-control:focus,
    .filter-section .form-select:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
    }

    .filter-section .input-group-text {
        background-color: var(--primary-color);
        color: var(--white);
        border-color: var(--primary-color);
        border-radius: 8px 0 0 8px;
    }
    html[dir='rtl'] .filter-section .input-group-text {
        border-radius: 0 8px 8px 0;
    }

    .filter-section .btn-apply-filter {
        background-color: var(--primary-color);
        color: var(--white);
        border-color: var(--primary-color);
        border-radius: 8px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: background-color 0.2s, transform 0.2s;
    }
    .filter-section .btn-apply-filter:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
        transform: translateY(-2px);
    }

    /* ---------------------- Product Card (Final Revised) ---------------------- */

    .product-card {
        border: none;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        background-color: var(--card-bg);
        box-shadow: var(--card-shadow-light);
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative; /* Needed for positioning admin bar */
    }

    .product-card:hover {
        transform: translateY(-8px);
        box-shadow: var(--card-shadow-hover);
    }

    /* Image Container */
    .product-img-wrapper {
        position: relative;
        height: 250px; 
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f0f4f8;
        border-bottom: 1px solid var(--card-border);
    }

    .product-img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
        display: block;
        transition: transform 0.4s ease;
    }
    
    .product-card:hover .product-img {
        transform: scale(1.03);
    }

    /* Admin Action Bar (New Position) */
    .admin-actions-bar {
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
        padding: 0.5rem;
        background: rgba(0, 0, 0, 0.6); /* Dark semi-transparent background */
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        z-index: 10;
        opacity: 0; /* Hidden by default */
        transition: opacity 0.3s ease;
        border-radius: 12px 12px 0 0;
    }
    
    /* Show Admin bar on Card Hover */
    .product-card:hover .admin-actions-bar {
        opacity: 1;
    }

    .admin-actions-bar .btn {
        padding: 0.3rem 0.6rem;
        font-size: 0.8rem;
        border-radius: 6px;
        font-weight: 500;
        color: var(--white);
        transition: background-color 0.2s;
    }
    .admin-actions-bar .btn-edit {
        background-color: #2196f3; /* Blue for Edit */
    }
    .admin-actions-bar .btn-edit:hover {
        background-color: #0b7dda;
    }
    .admin-actions-bar .btn-delete {
        background-color: #f44336; /* Red for Delete */
    }
    .admin-actions-bar .btn-delete:hover {
        background-color: #d32f2f;
    }


    /* Card Body, Name, Price and Main Actions kept the same */
    .product-card .card-body {
        padding: 1.2rem;
        text-align: center;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }

    .product-name {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--text-dark);
        margin-bottom: 0.6rem;
        min-height: 2.4em;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .product-price {
        font-size: 1.6rem;
        font-weight: 800;
        color: var(--accent-red);
        margin-bottom: 1.2rem;
    }
    
    .product-actions-group {
        margin-top: auto;
        display: flex;
        flex-direction: column;
        gap: 0.6rem;
    }

    .product-actions-group .btn {
        font-size: 0.95rem;
        font-weight: 600;
        border-radius: 8px;
        padding: 0.7rem 1rem;
        transition: all 0.2s ease;
        border: 1px solid transparent;
    }

    .btn-add-to-cart {
        background-color: var(--primary-color);
        color: var(--white);
    }
    .btn-add-to-cart:hover {
        background-color: var(--secondary-color);
        transform: translateY(-1px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    .btn-view-details {
        background-color: var(--white);
        color: var(--primary-color);
        border-color: var(--primary-color);
    }
    .btn-view-details:hover {
        background-color: var(--primary-color);
        color: var(--white);
        transform: translateY(-1px);
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }
</style>

<div class="products-container container my-4">
    <h2 class="text-center page-title">
        Our Available Products
    </h2>

    <div class="filter-section mb-5">
        <form asp-action="GetAllProducts" method="get" class="row g-3 align-items-center">
            <div class="col-lg-4 col-md-6 col-12">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" asp-for="SearchTerm" class="form-control" placeholder="Search products..." />
                </div>
            </div>

            <div class="col-lg-3 col-md-6 col-12">
                <select asp-for="SelectedCategoryId" class="form-select"
                        asp-items="@(new SelectList(Model.Categories, "Id", "Name"))">
                    <option value="">All Categories</option>
                </select>
            </div>

            <div class="col-lg-2 col-md-6 col-12">
                <input type="number" asp-for="MinPrice" class="form-control" placeholder="Min Price" />
            </div>

            <div class="col-lg-2 col-md-6 col-12">
                <input type="number" asp-for="MaxPrice" class="form-control" placeholder="Max Price" />
            </div>

            <div class="col-lg-1 col-12 d-grid">
                <button type="submit" class="btn btn-apply-filter">
                    <i class="fas fa-filter"></i> Apply
                </button>
            </div>
        </form>
    </div>

    <div class="row">
        @if (Model.Products != null && Model.Products.Any())
        {
            foreach (var item in Model.Products)
            {
                <div class="col-xl-3 col-lg-4 col-md-6 mb-4">
                    <div class="product-card">
                        
                        @if (User.IsInRole("Admin")) 
                        {
                            <div class="admin-actions-bar">
                                <a asp-action="Edit" asp-route-id="@item.ProductID"
                                   class="btn btn-edit">
                                    <i class="fas fa-edit"></i> Edit
                                </a>

                                <button type="button"
                                        class="btn btn-delete delete-btn"
                                        data-product-id="@item.ProductID"
                                        data-product-name="@(isRtl ? item.ProductNameAR : item.ProductName)">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        }

                        <a asp-action="Details" asp-route-id="@item.ProductID" class="product-img-wrapper">
                            <img src="@Url.Content(item.ImagePath)"
                                 class="product-img"
                                 alt="@item.ProductName" />
                        </a>
                        
                        <div class="card-body">
                            @{
                                var productName = isRtl ? item.ProductNameAR : item.ProductName;
                            }
                            <h5 class="product-name" title="@productName">
                                @productName
                            </h5>
                            
                            <p class="product-price">
                                $@item.Price
                            </p>

                            <div class="product-actions-group">
                                <form asp-action="AddToCart" asp-controller="Cart" method="post" class="d-grid">
                                    <input type="hidden" name="ProductID" value="@item.ProductID" />
                                    <input type="hidden" name="Quantity" value="1" />
                                    <button type="submit" class="btn btn-add-to-cart">
                                        <i class="fas fa-cart-plus me-2"></i> Add to Cart
                                    </button>
                                </form>

                                <a asp-action="Details" asp-route-id="@item.ProductID" class="btn btn-view-details">
                                    <i class="fas fa-info-circle me-2"></i> View Details
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="text-center text-muted p-5 fs-4">No products available matching your criteria.</p>
            </div>
        }
    </div>

    @if (Model.TotalItems > Model.PageSize)
    {
        var totalPages = (int)Math.Ceiling((double)Model.TotalItems / Model.PageSize);

        <nav class="mt-5">
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                        <a class="page-link px-3 py-2"
                           asp-action="GetAllProducts"
                           asp-route-PageNumber="@i"
                           asp-route-SearchTerm="@Model.SearchTerm"
                           asp-route-SelectedCategoryId="@Model.SelectedCategoryId"
                           asp-route-MinPrice="@Model.MinPrice"
                           asp-route-MaxPrice="@Model.MaxPrice">
                            @i
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <strong id="productName"></strong>?
            </div>
            <div class="modal-footer">
                <form id="deleteForm" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" id="deleteProductId" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-danger">Yes, Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const deleteButtons = document.querySelectorAll(".delete-btn");
            if (typeof bootstrap !== 'undefined') {
                const modalElement = document.getElementById("deleteConfirmModal");
                if (modalElement) {
                    const modal = new bootstrap.Modal(modalElement);
                    const productNameSpan = document.getElementById("productName");
                    const deleteProductIdInput = document.getElementById("deleteProductId");
                    const deleteForm = document.getElementById("deleteForm");

                    deleteButtons.forEach(button => {
                        button.addEventListener("click", function () {
                            const productId = this.getAttribute("data-product-id");
                            const productName = this.getAttribute("data-product-name");

                            productNameSpan.textContent = productName;
                            deleteProductIdInput.value = productId;
                            deleteForm.action = "/Product/RemoveConfirmation"; 

                            modal.show();
                        });
                    });
                }
            } else {
                console.error("Bootstrap 5 is required but not loaded.");
            }
        });
    </script>
}